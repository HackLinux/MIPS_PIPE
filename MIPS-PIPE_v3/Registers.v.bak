/*
 * Registers.v
 *
 * Main processor register bank testbench.
 * Stores information in 32-bit registers. 31 registers are available for
 * writing and 32 are available for reading.
 * Also allows for two simultaneous data reads, has a write enable signal
 * input, is clocked and has an asynchronous reset signal input.
 */
module Registers (iCLK, iCLR, iReadRegister1, iReadRegister2, iWriteRegister,
	iWriteData, iRegWrite, oReadData1, oReadData2, iRegDispSelect, oRegDisp,iRegA0,iA0en);

/* I/O type definition */
input wire [4:0] iReadRegister1, iReadRegister2, iWriteRegister, iRegDispSelect;
input wire [31:0] iWriteData, iRegA0;
input wire iCLK, iCLR, iRegWrite, iA0en;
output wire [31:0] oReadData1, oReadData2, oRegDisp;

/* Local register bank */
reg [31:0] registers[31:0];

int i;

initial
begin
	for (i = 0; i <= 31; i = i + 1)
	begin
		registers[i] = 32'b0;
	end
	registers[5'd29] = 32'd65400;  // $sp = Maximo - 33

/*	registers[5'd0] <= 32'b0;
	registers[5'd1] <= 32'b0;		
	registers[5'd2] <= 32'b0;
	registers[5'd3] <= 32'b0;
	registers[5'd4] <= 32'b0;
	registers[5'd5] <= 32'b0;
	registers[5'd6] <= 32'b0;
	registers[5'd7] <= 32'b0;
	registers[5'd8] <= 32'b0;
	registers[5'd9] <= 32'b0;		
	registers[5'd10] <= 32'b0;
	registers[5'd11] <= 32'b0;
	registers[5'd12] <= 32'b0;
	registers[5'd13] <= 32'b0;
	registers[5'd14] <= 32'b0;
	registers[5'd15] <= 32'b0;
	registers[5'd16] <= 32'b0;
	registers[5'd17] <= 32'b0;		
	registers[5'd18] <= 32'b0;
	registers[5'd19] <= 32'b0;
	registers[5'd20] <= 32'b0;
	registers[5'd21] <= 32'b0;
	registers[5'd22] <= 32'b0;
	registers[5'd23] <= 32'b0;
	registers[5'd24] <= 32'b0;
	registers[5'd25] <= 32'b0;		
	registers[5'd26] <= 32'b0;
	registers[5'd27] <= 32'b0;
	registers[5'd28] <= 32'b0;
	registers[5'd29] <= 32'd65400;
	registers[5'd30] <= 32'b0;
	registers[5'd31] <= 32'b0;
*/
end

/* Output definition */
assign oReadData1 =	registers[iReadRegister1];
assign oReadData2 =	registers[iReadRegister2];

assign oRegDisp =	registers[iRegDispSelect];


/* Main block for writing and reseting */
always @(negedge iCLK)   //cuidar banco de reg escrito no meio do ciclo
begin
	if (iCLR)
	begin
		for (i = 1; i <= 31; i = i + 1)
		begin
			registers[i] = 32'b0;
		end
		registers[5'd29] = 32'd65400;  // $SP
	end
	else if (~iCLK && iRegWrite)
	begin
		if (iWriteRegister != 5'b0)
		begin
			registers[iWriteRegister] =	iWriteData;
		end
	end

	/* Writing contents of iRegA0 into $a0 */
	if(iA0en)
		registers[5'd4] = iRegA0;
end

/*
always @(negedge iCLK)
begin
	if (iCLR)
		begin
		registers[5'd0] <= 32'b0;
		registers[5'd1] <= 32'b0;		
		registers[5'd2] <= 32'b0;
		registers[5'd3] <= 32'b0;
		registers[5'd4] <= 32'b0;
		registers[5'd5] <= 32'b0;
		registers[5'd6] <= 32'b0;
		registers[5'd7] <= 32'b0;
		registers[5'd8] <= 32'b0;
		registers[5'd9] <= 32'b0;		
		registers[5'd10] <= 32'b0;
		registers[5'd11] <= 32'b0;
		registers[5'd12] <= 32'b0;
		registers[5'd13] <= 32'b0;
		registers[5'd14] <= 32'b0;
		registers[5'd15] <= 32'b0;
		registers[5'd16] <= 32'b0;
		registers[5'd17] <= 32'b0;		
		registers[5'd18] <= 32'b0;
		registers[5'd19] <= 32'b0;
		registers[5'd20] <= 32'b0;
		registers[5'd21] <= 32'b0;
		registers[5'd22] <= 32'b0;
		registers[5'd23] <= 32'b0;
		registers[5'd24] <= 32'b0;
		registers[5'd25] <= 32'b0;		
		registers[5'd26] <= 32'b0;
		registers[5'd27] <= 32'b0;
		registers[5'd28] <= 32'b0;
		registers[5'd29] <= 32'd65400;
		registers[5'd30] <= 32'b0;
		registers[5'd31] <= 32'b0;
	end
	else if (~iCLK && iRegWrite && (iWriteRegister != 5'b0))
			registers[iWriteRegister] =	iWriteData;
	
	 Writing contents of iRegA0 into $a0 
	if(iA0en)
		registers[5'd4] = iRegA0;
end
*/
endmodule

